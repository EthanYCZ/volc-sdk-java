
// Code generated by protoc-gen-volcengine-sdk
// source: vod/service/service_vod.proto
// DO NOT EDIT!

package com.volcengine.service.vod.impl;

import com.alibaba.fastjson.JSON;
import com.google.protobuf.util.JsonFormat;
import com.volcengine.model.vod.request.VodUploadMediaRequest;
import com.volcengine.model.vod.response.VodCommitUploadInfoResponse;

import java.io.ByteArrayInputStream;
import java.io.InputStreamReader;
import java.util.*;

public class VodServiceImpl extends com.volcengine.service.BaseServiceImpl implements com.volcengine.service.vod.IVodService {

    protected VodServiceImpl() {
        super(com.volcengine.service.vod.VodConfig.ServiceInfoMap.get(com.volcengine.helper.Const.REGION_CN_NORTH_1), com.volcengine.service.vod.VodConfig.apiInfoList);
    }

    private VodServiceImpl(com.volcengine.model.ServiceInfo serviceInfo) {
        super(serviceInfo, com.volcengine.service.vod.VodConfig.apiInfoList);
    }

    public static com.volcengine.service.vod.IVodService getInstance() {
        return new VodServiceImpl();
    }

    public static com.volcengine.service.vod.IVodService getInstance(String region) throws Exception {
        com.volcengine.model.ServiceInfo serviceInfo = com.volcengine.service.vod.VodConfig.ServiceInfoMap.get(region);
        if (serviceInfo == null) {
            throw new Exception("Cant find the region, please check it carefully");
        }
        return new VodServiceImpl(serviceInfo);
    }

    public com.volcengine.model.sts2.SecurityToken2 getVideoPlayAuthWithExpiredTime(List<String> vidList, List<String> streamTypeList, List<String> watermarkList, long expiredTime) throws Exception {
        com.volcengine.model.sts2.Policy inlinePolicy = new com.volcengine.model.sts2.Policy();
        List<String> actions = new ArrayList<>();
        actions.add(com.volcengine.service.vod.VodConfig.ACTION_GET_PLAY_INFO);
        List<String> resources = new ArrayList<>();

        // 设置vid的resource权限
        addResourceFormat(vidList, resources, com.volcengine.service.vod.VodConfig.RESOURCE_VIDEO_FORMAT);

        // 设置streamType的resource权限
        addResourceFormat(streamTypeList, resources, com.volcengine.service.vod.VodConfig.RESOURCE_STREAM_TYPE_FORMAT);

        // 设置watermark的resource权限
        addResourceFormat(watermarkList, resources, com.volcengine.service.vod.VodConfig.RESOURCE_WATERMARK_FORMAT);

        com.volcengine.model.sts2.Statement statement = com.volcengine.util.Sts2Utils.newAllowStatement(actions, resources);
        inlinePolicy.addStatement(statement);
        return signSts2(inlinePolicy, expiredTime);
    }

    private void addResourceFormat(List<String> list, List<String> resources, String resourceFormat) {
        if (list.size() == 0)
            resources.add(String.format(resourceFormat, com.volcengine.service.vod.VodConfig.STAR));
        else
            list.forEach(value -> resources.add(String.format(resourceFormat, value)));
    }

    public com.volcengine.model.sts2.SecurityToken2 getVideoPlayAuth(List<String> vidList, List<String> streamTypeList, List<String> watermarkList) throws Exception {
        return getVideoPlayAuthWithExpiredTime(vidList, streamTypeList, watermarkList, com.volcengine.util.Time.Hour);
    }

    @Override
    public String getPlayAuthToken(Map<String, String> params) throws Exception {
        Map<String, String> ret = new HashMap<>();
        ret.put("Version", "v1");
        String getPlayInfoToken = getSignUrl(com.volcengine.helper.Const.GetPlayInfo, com.volcengine.helper.Utils.mapToPairList(params));
        ret.put("GetPlayInfoToken", getPlayInfoToken);

        String retStr = JSON.toJSONString(ret);
        Base64.Encoder encoder = Base64.getEncoder();
        return encoder.encodeToString(retStr.getBytes());
    }


    /**
     * getPlayInfo.
     *
     * @param input com.volcengine.model.vod.request.VodGetPlayInfoRequest
     * @return com.volcengine.model.vod.response.VodGetPlayInfoResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodGetPlayInfoResponse getPlayInfo(com.volcengine.model.vod.request.VodGetPlayInfoRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.GetPlayInfo, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodGetPlayInfoResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodGetPlayInfoResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * getOriginalPlayInfo.
     *
     * @param input com.volcengine.model.vod.request.VodGetOriginalPlayInfoRequest
     * @return com.volcengine.model.vod.response.VodGetOriginalPlayInfoResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodGetOriginalPlayInfoResponse getOriginalPlayInfo(com.volcengine.model.vod.request.VodGetOriginalPlayInfoRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.GetOriginalPlayInfo, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodGetOriginalPlayInfoResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodGetOriginalPlayInfoResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * uploadMediaByUrl.
     *
     * @param input com.volcengine.model.vod.request.VodUrlUploadRequest
     * @return com.volcengine.model.vod.response.VodUrlUploadResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodUrlUploadResponse uploadMediaByUrl(com.volcengine.model.vod.request.VodUrlUploadRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.UploadMediaByUrl, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodUrlUploadResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodUrlUploadResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * queryUploadTaskInfo.
     *
     * @param input com.volcengine.model.vod.request.VodQueryUploadTaskInfoRequest
     * @return com.volcengine.model.vod.response.VodQueryUploadTaskInfoResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodQueryUploadTaskInfoResponse queryUploadTaskInfo(com.volcengine.model.vod.request.VodQueryUploadTaskInfoRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.QueryUploadTaskInfo, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodQueryUploadTaskInfoResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodQueryUploadTaskInfoResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * applyUploadInfo.
     *
     * @param input com.volcengine.model.vod.request.VodApplyUploadInfoRequest
     * @return com.volcengine.model.vod.response.VodApplyUploadInfoResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodApplyUploadInfoResponse applyUploadInfo(com.volcengine.model.vod.request.VodApplyUploadInfoRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.ApplyUploadInfo, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodApplyUploadInfoResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodApplyUploadInfoResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * commitUploadInfo.
     *
     * @param input com.volcengine.model.vod.request.VodCommitUploadInfoRequest
     * @return com.volcengine.model.vod.response.VodCommitUploadInfoResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodCommitUploadInfoResponse commitUploadInfo(com.volcengine.model.vod.request.VodCommitUploadInfoRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.CommitUploadInfo, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodCommitUploadInfoResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodCommitUploadInfoResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }

    @Override
    public VodCommitUploadInfoResponse uploadMedia(VodUploadMediaRequest vodUploadMediaRequest) throws Exception {
        throw new RuntimeException("Should impl by VodUploadServiceImpl");
    }


    /**
     * updateVideoInfo.
     *
     * @param input com.volcengine.model.vod.request.VodUpdateVideoInfoRequest
     * @return com.volcengine.model.vod.response.VodUpdateVideoInfoResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodUpdateVideoInfoResponse updateVideoInfo(com.volcengine.model.vod.request.VodUpdateVideoInfoRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.UpdateVideoInfo, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodUpdateVideoInfoResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodUpdateVideoInfoResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * updateVideoPublishStatus.
     *
     * @param input com.volcengine.model.vod.request.VodUpdateVideoPublishStatusRequest
     * @return com.volcengine.model.vod.response.VodUpdateVideoPublishStatusResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodUpdateVideoPublishStatusResponse updateVideoPublishStatus(com.volcengine.model.vod.request.VodUpdateVideoPublishStatusRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.UpdateVideoPublishStatus, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodUpdateVideoPublishStatusResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodUpdateVideoPublishStatusResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * getVideoInfos.
     *
     * @param input com.volcengine.model.vod.request.VodGetVideoInfosRequest
     * @return com.volcengine.model.vod.response.VodGetVideoInfosResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodGetVideoInfosResponse getVideoInfos(com.volcengine.model.vod.request.VodGetVideoInfosRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.GetVideoInfos, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodGetVideoInfosResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodGetVideoInfosResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * getRecommendedPoster.
     *
     * @param input com.volcengine.model.vod.request.VodGetRecommendedPosterRequest
     * @return com.volcengine.model.vod.response.VodGetRecommendedPosterResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodGetRecommendedPosterResponse getRecommendedPoster(com.volcengine.model.vod.request.VodGetRecommendedPosterRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.GetRecommendedPoster, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodGetRecommendedPosterResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodGetRecommendedPosterResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


    /**
     * StartWorkflow.
     *
     * @param input com.volcengine.model.vod.request.VodStartWorkflowRequest
     * @return com.volcengine.model.vod.response.VodStartWorkflowResponse
     * @throws Exception the exception
     */
    @Override
    public com.volcengine.model.vod.response.VodStartWorkflowResponse StartWorkflow(com.volcengine.model.vod.request.VodStartWorkflowRequest input) throws Exception {
        com.volcengine.model.response.RawResponse response = query(com.volcengine.helper.Const.StartWorkflow, com.volcengine.helper.Utils.mapToPairList(com.volcengine.helper.Utils.protoBufferToMap(input)));
        if (response.getCode() != com.volcengine.error.SdkError.SUCCESS.getNumber()) {
            throw response.getException();
        }
        com.volcengine.model.vod.response.VodStartWorkflowResponse.Builder responseBuilder = com.volcengine.model.vod.response.VodStartWorkflowResponse.newBuilder();
        JsonFormat.parser().ignoringUnknownFields().merge(new InputStreamReader(new ByteArrayInputStream(response.getData())), responseBuilder);
        return responseBuilder.build();
    }


}  // end of service interface
